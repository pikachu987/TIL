## statePattern
자신이 처한 상태에 따라 일을 다르게 수행한다. 이를 표현하는 가장 직접적이고 직관적인 방법은 일을 수행할 때의 상태에 따라 상태 하나하나가 어떤 상태인지 검사해 일을 다르게 수행하게끔 하는 것이다. 이는 분명 복잡한 조건식이 있는 코드를 산출할 것이고, 결과적으로 코드를 이해하거나 수정하기 어렵게 만든다.
이런 방식과는 달리 스테이트패턴은 어떤 행위를 수행할 때 상태에 행위를 수행하도록 위임한다. 이를 위해 스테이트 패턴에서는 시스템의 각 생태를 클래스로 분리해 표현하고, 각 클래스에서 수행하는 행위들을 메서드로 구현한다. 그리고 이러한 상태들을 외부로부터 캡슐화하기 위해 인터페이스를 만들어 시스템의 각 상태를 나타내는 클래스로 하여금 실체화하게 한다.
* **State**: 시스템의 모든 상태에 공통의 인터페이스를 제공한다. 따라서 이 인터페이스를 실체화한 어떤 상태 클래스도 기존 상태 클래스를 대신해 교체해서 사용할 수 있다.
* **State1,State2,State3**:Context 객체가 요청한 작업을 자신의 방식으로 실제 실행한다. 대부분의 경우 다음 상태를 결정해 상태 변경을 Context 객체에 요청하는 역활도 수행한다.
* **Context**: State를 이용하는 역활을 수행한다. 현재 시스템의 상태를 나타내는 상태변수(state)와 실제 시스템의 상태를 구성하는 여러가지 변수가 있다. 또한 각 생태 클래스에서 상태 변경을 요청해 상태를 변경하는 메서드(setState)가 제공된다. Context 요소를 구현한 클래스의 request 메서드는 실제 행위를 실행하는 대신 해당 상태 객체에 행위 실행을 위임한다.  


### ex1 형광등 만들기

##### ex1.process1 의문제점
* 형광등에 새로운 상태를 추가할 때, 가령 형광등에 '취침등' 상태를 추가하려면?
* 일단 코드를 예상해보자.
* 취침등 상태를 나타내는 static 상수를 만들어야겠다.
* on_button_pushed, off_button_pushed 메소드에 조금 더 복잡한 조건문을 걸어야 겠다.

###### ex1.process1 해결책
> 변하는 부분을 찾아서 이를 캡슐화 하는 작업이 필요하다.
> 현재 시스템이 어떤 상태에 있는지와 상관없게 구성하고 상태변화에도 독립적으로 코드를 수정해야 한다.
> 상태를 클래스로 분리하자.  
  
> 한가지 생각 해야 할 것이 on_button_pushed, off_button_pushed를 실행 할 때마다 인스턴스를 새로 생기게 하는게 아니라 싱글턴으로 실행 하는게 메모리 낭비, 성능에 좋은 방법일 수 있다.

* Light 클래스는 Context 역활을 수행한다.
* State 인터페이스트 State 역활을 수행한다.
* ON, OFF 클래스는 State1,State2 역활을 수행한다.



### ex2 도서관에 보관된 책의 대출과 예약
* 책은 처음에 누구나 대출할 수 있다.
* 책이 도서관에서 체크아웃되면 대출 중 상태로 바뀐다.
* 책이 대출 중인 상태에 있을 때만 예약할 수 있다.
* 예약 중인 상태의 책이 반환되면 책은 예약자에게 대출해주기 위해 일정 기간 보관한다.
* 책이 보관 중인 상테에 있을 때 예약을 취소하거나 보관기간이 자나면 누구나 책을 대출할 수 있다.
* 대출 중인 책이 반환되면 다시 누구나 대출할 수 있다.
* 책이 대출 중이거나 보관 중일 때는 예약을 취소할 수 있다.

> 일단 생각을 해보자. 생각을 힘을 키워보자.
> 책 객체를 만들자. 상태 인터페이스를 만들자.
> 상태인터페이스에는 체크아웃, 예약, 취소, 시간지남, 반환 의 메소드들이 있겠다. 
> 그리고 클래스들은 이용가능, 빌림, 반환, 보관이 있겠다.
> 여기까지 생각을 했으면 한번 짜보자.
> 그리고 메인에서 막 실행해보자(메소드 내부에서 하는 내용은 실제와 다를수 있다. 상황에 따라 다를수 있는 거지만 짜는 방향은 state패턴으로 맞춘거 같다.)

### ex3 벤딩머신
* 벤딩 머신에 돈을 넣고 버튼을 누르면 음료수를 뽑을 수 있다.
* 거스름돈이나 현재 넣은 돈을 반환할 수 있으며 반환한 돈의 액수를 출력한다.
* 음료의 가격과 재고를 지정할 수 있다.
* 돈을 넣으면 현재 넣은 돈의 총합을 출력한다.
* 돈이 없을 때 음료버튼이나 반환 버튼이 눌러지면 에러메시지를 출력한다.
* 돈이 있어도 음료 가격보다 돈의 액수가 적으면 음료를 뽑을 수 없으며 에러 메시지를 출력한다.
* 재고가 있고 음료가격 이상의 돈이 있을 때 음료를 뽑을 수 있다.
* 음료가 매진되었을 경우 돈이 투입되면 곧바로 반환하고 에러메시지를 출력한다.
* 음료가 매진되었을 경우 버튼이 눌러지면 에러 메시지를 출력한다.

> 이거도 일단 벤딩머신객체를 만들자. 엄청나게 복잡하다.........
