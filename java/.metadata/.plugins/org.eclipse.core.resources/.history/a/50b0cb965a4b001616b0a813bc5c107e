## statePattern
스트래티지 패턴은 전략을 쉽게 바꿀 수 있도록 해주는 디자인 패턴이다. 여기에서 전략이란 어떤 목적을 달성하기 위해 일을 수행하는 방식, 비지니스 규칙, 문제를 해결하는 알고리즘 등으로 이해할 수 있다.
프로그램에서 전략을 실행할 때는 쉽게 전략을 바꿔야 할 필요가 있는 경우가 많이 발생한다. 특히 게임 프로그래밍에서 게임 캐릭터가 자신이 처한 상황에 따라 공격이나 행동하는 방식을 바꾸고 싶을 때 스트래티지 패턴은 매우 유용하다.
(스트래티지 패턴은 같은 문제를 해결하는 여러 알고리즘이 클래스별로 캡슐화되어 있고 이들이 필요할 때 교체할 수 있도록 함으로써 동일한 문제를 다른 알고리즘으로 해결할 수 있게 하는 디자인 패턴이다.)

### ex1 형광등 만들기

##### ex1.process1 의문제점
* 형광등에 새로운 상태를 추가할 때, 가령 형광등에 '취침등' 상태를 추가하려면?
* 일단 코드를 예상해보자.
* 취침등 상태를 나타내는 static 상수를 만들어야겠다.
* on_button_pushed, off_button_pushed 메소드에 조금 더 복잡한 조건문을 걸어야 겠다.

###### ex1.process1 해결책
> 변하는 부분을 찾아서 이를 캡슐화 하는 작업이 필요하다.
> 현재 시스템이 어떤 상태에 있는지와 상관없게 구성하고 상태변화에도 독립적으로 코드를 수정해야 한다.
> 상태를 클래스로 분리하자.





### ex1 선풍기 만들기
* 선풍기는 기본적으로 OFF 상태에서 시작한다.
* OFF 상태에서 사용자가 선풍기 스위치를 켜면 switch_on 이벤트를 발생시킨다. 이때 전원이 들어온 상태라면(power_exists 조건) ON 상태로 진입한다. 이때 turnon 액션을 실행하게 된다.
* OFF 상태에서 사용자가 선풍기 스위치를 켜면 switch_on 이벤트를 발생시킨다. 이때 전원이 들어오지 않은 상태라면(power_exists 조건) OFF 상태에 머무른다.
* 사용자가 ON 상태에서 동작 버튼을 누르면 run 이벤트를 발생시키고 WORKING 상태로 진입한다. 이때 operate 액션을 실행하게 된다.
* 선풍기가 ON 상태나 WORKING 상태에 머무를 때 사용자가 스위치를 끄면 switch_off 이벤트가 발생하고 이 이벤트로 인해 OFF 상태로 진입한다.