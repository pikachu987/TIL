## singletonPattern
스트래티지 패턴은 전략을 쉽게 바꿀 수 있도록 해주는 디자인 패턴이다. 여기에서 전략이란 어떤 목적을 달성하기 위해 일을 수행하는 방식, 비지니스 규칙, 문제를 해결하는 알고리즘 등으로 이해할 수 있다.
프로그램에서 전략을 실행할 때는 쉽게 전략을 바꿔야 할 필요가 있는 경우가 많이 발생한다. 특히 게임 프로그래밍에서 게임 캐릭터가 자신이 처한 상황에 따라 공격이나 행동하는 방식을 바꾸고 싶을 때 스트래티지 패턴은 매우 유용하다.
(스트래티지 패턴은 같은 문제를 해결하는 여러 알고리즘이 클래스별로 캡슐화되어 있고 이들이 필요할 때 교체할 수 있도록 함으로써 동일한 문제를 다른 알고리즘으로 해결할 수 있게 하는 디자인 패턴이다.)

### ex1 프린터 사용

##### ex1.process1 의문제점
* 다중 스레드에서 Printer 클래스를 이용할 때 인스턴스가 1개 이상 생성되는 경우가 발생할 수 있다.
* 일단 다중 스레드가 들어가는 ex1.process2 예제를 보자

###### ex2.process2 실행결과
* 가끔씩 다른 주소값을 가지는 값들이 나온다. Printer의 인스턴스가 1개 이상 생성되서 출력 되는 것이다.
* 문제는 없지만 Printer 클래스가 상태값들이 있고 이게 유지 되어야 하는 상황에서는 문제가 발생될 수 있다.

###### ex1.process2 에서의 해결방안

> 1.정적 변수에 인스턴스를 만들어 바로 초기화하는 방법
> 2.인스턴스를 만드는 메서드에 동기화하는 방법

##### ex1.process3 정적 변수에 인스턴스를 만들어 바로 초기화
> static로 변수를 초기화하고 get메소드에도 static를 붙이면 메모리에 로딩될때 한 번만 실행이 된다.
> 또한 정적변수는 프로그램이 실행될 때부터 종료될 때까지 없어지지 않고 메모리에 남아있기 때문에 클래스에서 생성된 모든 객체에서 참조할 수 있다.

###### ex1.process4 인스턴스를 만드는 메서드에 동기화
> 동기화를 하면 동시에 여러 스레드가 getPrinter 메서드를 소유하는 객체에 접근하는 것을 방지한다.
> 결국 오직 하나의 인스턴스만 생성된다.
