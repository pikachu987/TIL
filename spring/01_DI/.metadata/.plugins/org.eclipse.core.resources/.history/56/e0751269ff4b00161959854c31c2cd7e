### pom.xml
기본적으로 모든 프로젝트에서는 com.company이라는 패키지명을 쓰겠다.(내마음)
간단하게 만들었다.
일단 dependency에서는 spring-context 하나만 썻다. 실무에서는 하나만 쓰이는 경우는 절때(?!) 없다. 하지만 여기 프로젝트에서는 하나만 써도 큰 어려움이 없기 때문에 하나만 쓰겠다. dependency에서는 여러가지를 추가 할수 있는데 spring, json, mysql, jsp, oracle, 등등 많은 것을 추가 해주면 java, xml 코드 상에서 쓸 수 있다.
xml은 일단 나도 실무에서 쓰는것은 추가하지 않고 쓰이는 것들만 추가하도록 해보겠다.

### 클래스 설명

* **User** : 사용자 정보를 보관하고, 암호 일치 여부(matchPassword)와 암호 변경 기능(changePassword)을 제공한다.
* **UserRepository** : User 객체를 보관하며, ID를 이용해서 User 객체를 찾는 기능(findUserById)을 제공한다.
* **AuthFailLogger** : AuthenicationServer가 인증에 실패한 기록을 남기기 위한 목적으로 사용한다. 책의 예제는 콘솔에 내용을 출력하도록 구현하였다.
* **AuthenticationServer** : 아이디/암호를 입력받아 인증을 수행한다. UserRepository로 부터 User 객체를 구한 뒤, User 객체의 matchPassword() 메서드를 이용해서 아이디/암호일치 여부를 판단한다. 아이디/암호가 일치하지 않을 경우 AuthFailLogger의 insertBadPw() 메서드를 실행해서 실패 기록을 남긴다.
* **PasswordChangeService** : 암호 변경 기능을 수행한다. AuthenticationService와 마찬가지로 UserRepository로 부터 User 객체를 구하고, 그 User 객체의 changePassword() 메서드를 이용해서 암호를 변경한다.


#### p,c네임스페이스

##### config.xml
~~~~
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:c="http://www.springframework.org/schema/c"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

<bean id="user1" class="com.company.User" c:id="user1" c:password="1234"/>
<bean id="user2" class="com.company.User" c:_0="user2" c:_1="12345"/>

<bean id="pwChangeSvc" class="com.company.PasswordChangeService" c:userRepository-ref="userRepository" />

<bean id="authFailLogger" class="com.company.AuthFailLogger" p:threshold="2" />

<bean id="authService" class="com.company.AuthenticationService" p:failLogger-ref="authFaiilLogger" p:userRepository-ref="userRepository" />

</beans>
~~~~

> 코드로 보면 알겠지만 p,c 네임스페이스는 간결하게 코드를 만들어준다.

---

#### import

##### xml
~~~~
<beans ..... >
...
<import resource="classpath:/folder/foo.xml">
<import resource="classpath:/folder/boo.xml">
<import resource="classpath:/folder/foo/*.xml">
...
</beans>
~~~~

> xml 안에서 xml을 쉽게 import 하는 방법이다.


##### java(config)
~~~~
@Configuration
//@Import(ConfigSensor.class)
@Import({ConfigSensor.class, ConfigDashboard.class})
public class Config{
...
}
~~~~

> java에서 설정파일들을 쉽게 import 하는 방법이다.

---

##### xml VS java
> 각 방식마다 장단점이 있고 개발자마다 호불호가 갈린다.
> xml방식

* 설정 정보를 변경할 때에는 XML만 변경하면 된다.
* 많은 프레임워크/라이브러리가 XML 스키마를 이용한 설정의 편리함을 지원한다.
* (IDE의 코드 자동완성 기능이 빈약하면) XML 작성 과정이 다소 번거롭다.
* 코드를 실행해야 설정 정보 오류를 확인할 수 있다.

> java 방식

* 컴파일러의 도움을 받기 때문에, 오타 등의 설정 정보 오류를 미리 알 수 있다.
* 자바코드이기 때문에 IDE가 제공하는 코드자동완성 기능의 도움을 받을 수 있다.
* 설정정보를 변경하려면 자바 코드를 재컴파일 해줘야 한다.
* XML 스키마 기반의 설정을 지원하는 프레임워크/라이브러리 중 아직 자바 기반의 편리한 설정을 지원하지 않는 경우가 있다.

> 각각의 장점이 서로 다르기 때문에, 한가지 방식만 고집해서 사용하기 보다는 상황에 따라 알맞게 방식을 조합해서 사용하곤 한다.


