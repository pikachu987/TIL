/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.32
 * Generated at: 2016-09-02 10:23:00 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.view;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class ex4_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=utf-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("<meta charset=\"utf-8\">\n");
      out.write("<title>채팅</title>\n");
      out.write("<script src=\"//cdn.jsdelivr.net/sockjs/1/sockjs.min.js\"></script>\n");
      out.write("<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.1.0/jquery.min.js\"></script>\n");
      out.write("<script type=\"text/javascript\">\n");
      out.write("\t$(document).ready(function(){\n");
      out.write("\t\tvar sock;\n");
      out.write("\t\t\n");
      out.write("\t\t\n");
      out.write("\t\t$('#enter').click(function(){\n");
      out.write("\t\t\tsock = new SockJS(\"http://localhost:8080/03_Websocket/chat.sockjs\");\n");
      out.write("\t\t\tsock.onopen = onOpen;\n");
      out.write("\t\t\tsock.onmessage = onMessage;\n");
      out.write("\t\t\tsock.onclose = onClose;\n");
      out.write("\t\t});\n");
      out.write("\t\t$('#disconnect').click(function(){\n");
      out.write("\t\t\tsock.close();\n");
      out.write("\t\t});\n");
      out.write("\t\t\n");
      out.write("\t\t\n");
      out.write("\t\tfunction onOpen(e){\n");
      out.write("\t\t\t$('#chatArea').append('연결<br>');\n");
      out.write("\t\t}\n");
      out.write("\t\tfunction onMessage(e){\n");
      out.write("\t\t\tvar data = e.data;\n");
      out.write("\t\t\tif(data.substring(0,4) == \"msg:\"){\n");
      out.write("\t\t\t\t$('#chatArea').append(data.substring(4)+\"<br>\");\n");
      out.write("\t\t\t}\n");
      out.write("\t\t}\n");
      out.write("\t\tfunction onClose(e){\n");
      out.write("\t\t\t$('#chatArea').append('연결 끊김<br>');\n");
      out.write("\t\t}\n");
      out.write("\t\t\n");
      out.write("\t\t$('#send').click(function(){\n");
      out.write("\t\t\tsend();\n");
      out.write("\t\t});\n");
      out.write("\t\t\n");
      out.write("\t\t$('#msg').keypress(function(event){\n");
      out.write("\t\t\tvar keycode = (event.keyCode ? event.keyCode : event.which);\n");
      out.write("\t\t\tif(keycode == '13'){\n");
      out.write("\t\t\t\tsend();\n");
      out.write("\t\t\t}\n");
      out.write("\t\t\tevent.stopPropagation();\n");
      out.write("\t\t});\n");
      out.write("\t\t\n");
      out.write("\t\tfunction send(){\n");
      out.write("\t\t\tvar nickname = $('#nickname').val();\n");
      out.write("\t\t\tvar msg = $('#msg').val();\n");
      out.write("\t\t\tsock.send(\"msg:\"+nickname+\":\"+msg)\n");
      out.write("\t\t\t$('#msg').val(\"\");\n");
      out.write("\t\t}\n");
      out.write("\t});\n");
      out.write("</script>\n");
      out.write("<style>\n");
      out.write("#chatArea {\n");
      out.write("\twidth: 200px; height: 100px; overflow-y: auto; border: 1px solid black;\n");
      out.write("}\n");
      out.write("</style>\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("\t<input id=\"nickname\"><br>\n");
      out.write("\t<input type=\"button\" id=\"enter\" value=\"입장\">\n");
      out.write("\t<input type=\"button\" id=\"disconnect\" value=\"종료\">\n");
      out.write("\t<br>\n");
      out.write("\t<div id=\"chatArea\"></div>\n");
      out.write("    <br/>\n");
      out.write("    <input type=\"text\" id=\"msg\">\n");
      out.write("    <input type=\"button\" id=\"send\" value=\"전송\">\n");
      out.write("</body>\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
