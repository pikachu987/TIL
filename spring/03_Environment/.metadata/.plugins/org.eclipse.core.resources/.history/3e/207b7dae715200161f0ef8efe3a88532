## Environment
어플리케이션을 개발하다보면 동일한 코드를 사용하면서 일부 정보만 변경하고 싶은 경우가 흔히 발생한다. 이 경우 프로그램 코드를 바꾸기 보다는 별도 파일을 이용해서 설정 정보를 변경하도록 만든다. 예를 들어, Tomcat Server는 server.xml이라는 파일에 사용할 포트 번호를 설정하며, 아파치 웹 서버는 httpd.conf 파일에 포트 번호와 디렉토리 경로를 설정한다.

스프링도 비슷하게 스프링 설정 변경 없이 외부에서 입력한 정보를 이용해서 설정 값을 변경하는 방법들을 제공하고 있으며, 그중 한 가지 방법이 Environment 이다.

스프링의 Environment는 다음의 두 가지 기능을 제공한다.
* 프로퍼티 통합 관리
* 프로필을 이용해서 선택적으로 설정 정보를 사용할 수 있는 방법 제공

Environment는 시스템 환경 변수, JVM 시스템 프로퍼티, 프로퍼티 파일 등의 프로퍼티를 PropertySource라는 것으로 통합 관리한다. 따라서 설정 파일이나 클래스 수정없이 시스템 프로퍼티나 프로퍼티 파일 등을 이용해서 설정 정보의 일부를 변경할 수 있다.

또한, Environment는 여러 프로필(Profile) 중에서 특정 프로필을 활성화하는 기능을 제공하고 있다. 이 기능을 사용하면 개발환경, 통합테스트 환경, 실 서비스 환경에 따라 서로 다른 스프링 빈 설정을 선택할 수 있기 때문에, 서로 다른 환경을 휘한 설정 정보를 편리하게 관리할 수 있다.


### Environment  구하기
org.springframework.env.Environment를 직접 사용할 일이 많진 않지만, 코드에서 프로필을 선택하거나 Environment에 새로운 PropertySource를 직접 추가해주어야 한다면 ConfigurableApplcationContext에 정의된 getEnvironment() 메서드를 이용해서 Environment를 구할 수 있다.

~~~~
import org.springframework.core.env.ConfigurableEnvironment;

...
ConfigurableApplicationContext context = new ApplcationConfigApplcationContext();
ConfigurableEnvironment environment = context.getEnvironment();
environment.setActiveProfiles("dev");
~~~~

getEnvironment() 메서드가 리턴하는 타입은 Environment의 하위 타입인 org.springframework.core.env.ConfigurableEnvironment 타입이다. ConfigurableEnvironment 타입은 사용할 프로필을 선택하는 기능과 PropertySource를 추가하는데 필요한 기능을 제공한다.
