### 싱글톤 범위

별도 설정을 하지 않을 경우 스프링은 빈 객체를 한 번만 생성한다. getBean() 메서드를 두 번 이상 호출해서 빈을 구하면 매번 동일한 빈 객체를 리턴한다. 예를 들어, 아래와 같은 XML 설정이 있다고 하자.

~~~~
<bean id="pool1" class="com.company.ConnPool1" />
~~~~
> 이 XML 설정을 이용해서 컨테이너를 생성한다음에 "pool1" 빈 객체를 아래와 같이 구했다고 해보자

~~~~
ConnPool1 p1 = ctx.getBean("pool1", ConnPool1.class);
ConnPool2 p2 = ctx.getBean("pool2", ConnPool2.class);
//p1 == p2 는 true, 즉, p1과 p2는 동일한 객체를 참조함
~~~~

> 스프링 컨테이너는 이름이 "pool1"인 빈 객체를 한 개만 생성하고, getBean() 메서드는 매번 동일한 객체를 리턴하기 때문에, 위 코드에서 p1과 p2는 동일한 객체를 참조하게 된다.

> 스프링 컨테이너가 초기화되고 종료되기 직전까지 빈 객체는 한 개만 생성되는데, 즉, 스프링 컨테이너를 기준으로 이들 빈 객체는 한 개만 존재하므로, 이들 빈은 싱글톤(singleton) 범위를 갖는다고 한다.

> 스프링 싱글톤은 기본 값으로 갖기 때문에, 별도 설정을 하지 않으면 빈은 싱글톤 범위를 갖는다. 싱글톤 범위라는 것을 명시적으로 표시하고 싶다면 다음과 같이 scope 속성이나 @Scope 애노테이션을 추가해주면 된다.

-- XML
~~~~
<bean id="pool1" class="com.company.ConnPool1" scope="singleton"/>
~~~~

-- JAVA
~~~~
import org.springframework.context.annotation.Scope;

@Bean
@Scope("singleton")
public ConnPool1 pool1(){
	return new ConnPool1();
}
~~~~

### 프로토타입 범위