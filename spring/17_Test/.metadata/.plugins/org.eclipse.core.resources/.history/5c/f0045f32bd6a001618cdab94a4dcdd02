package com.company;


import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;
import static org.hamcrest.Matchers.equalTo;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.test.context.web.WebAppConfiguration;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.result.MockMvcResultHandlers;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;
import org.springframework.web.context.WebApplicationContext;
import org.springframework.web.servlet.view.InternalResourceViewResolver;

import config.MvcConfig;
import net.madvirus.spring4.chap18.HelloController;


@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(classes=MvcConfig.class)
@WebAppConfiguration
public class Test6 {
	@Autowired
	private WebApplicationContext ctx;
	private MockMvc mockMvc;
	
	@Before
	public void setup(){
		InternalResourceViewResolver viewResolver = new InternalResourceViewResolver();
		viewResolver.setPrefix("/WEB-INF/view/");
		viewResolver.setSuffix(".jsp");

		mockMvc = MockMvcBuilders.standaloneSetup(new ViewController())
				.setViewResolvers(viewResolver)
				.build();
	}
	
	@Test
	public void test1() throws Exception{
		mockMvc.perform(get("/hello").param("name", "pikachu987"))
		.andExpect(status().isOk())
		.andExpect(model().attributeExists("code"));
	}
	
	@Test
	public void testHelloJson() throws Exception {
		mockMvc.perform(post("/hello2")
				.contentType(MediaType.APPLICATION_JSON)
				.content("{\"name\": \"pikapika\"}")
				)
				.andExpect(status().isOk())
				.andExpect(jsonPath("$.greeting", equalTo("hello pikapika")));
	}
}
